openapi: 3.0.0
info:
  title: Node.js REST API Server
  version: 1.0.0
  description: A Node.js server interfacing with a PHP backend and MySQL database.
servers:
  - url: http://localhost:{port}
    variables:
      port:
        default: '3000'
paths:
  /register:
    post:
      summary: Registers a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User successfully registered.
        '400':
          description: Missing username or password.
        '409':
          description: Username already taken.
        '500':
          description: Server error.

  /login:
    post:
      summary: Logs in a user and returns a token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successfully logged in.
        '401':
          description: Invalid credentials.
        '500':
          description: Server error.

  /devices:
    get:
      summary: Retrieves a list of devices.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of devices.
        '401':
          description: Unauthorized.
        '500':
          description: Server error.
    post:
      summary: Creates a new device.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              # Define the device schema here
      responses:
        '201':
          description: Device created.
        '401':
          description: Unauthorized.
        '500':
          description: Server error.

  /devices/{id}:
    get:
      summary: Retrieves a specific device by ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The device ID.
      responses:
        '200':
          description: Device details.
        '401':
          description: Unauthorized.
        '404':
          description: Device not found.
        '500':
          description: Server error.
    put:
      summary: Updates a specific device by ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The device ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              # Define the update schema here
      responses:
        '200':
          description: Device updated.
        '401':
          description: Unauthorized.
        '404':
          description: Device not found.
        '500':
          description: Server error.
    delete:
      summary: Deletes a specific device by ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The device ID.
      responses:
        '200':
          description: Device deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Device not found.
        '500':
          description: Server error.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
